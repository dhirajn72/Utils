
Save and quite
--------------
ZQ - To Quite VI, without saving any changes
ZZ - To Quite VI, by saving your changes

diw or dw - Deletes the current word
d2w -Delete two words in forward direction


To indent (format the code)
-----------------------------
=i{     -  to format the code inside the paranthesis {}
=a{     -  to indent the code around the parenthesis 
gg=G      -  to indent the whole file

-------------------------------

db - Deletes word in backword direction from the cursor to beggining of the word
de - Deletes the word in forward direction from the cursor till the end of word 
dd - Deletes the whole line
2dd- Deletes 2 line in forward diection
d$ or D - Deletes the line after the cursor till the end of the line
d0 - Delete the line before the cursor till the beggining of the line
kjsbkasnv ( jkhfjksdnak askjdnvkjs kjndjkn njkwnjkw) jsbjbnjka
kjsbkasnv ( jkhfjksdnak askjdnvkjs kjndjkn njkwnjkw) jsbjbnjka
------------------------------------------------------------------------------------------------------------------------------------------------------
If anything is inside (),[],'',"" and you want to delete it,use,

di( - Deletes averything inside ();
di[ - Deletes averything inside [];
di{ - deletes averything inside {;
similarly t applies to ', " also.
replacing d with c will put you in the insert mode.

ci( - Deletes averything inside () and got to insert mode ;
ci[ - Deletes averything inside [] and got to insert mode ;
ci{ - deletes averything inside { and got to insert mode ;

above commands can be used by replacing 'i' (including) with 'a' (around) and it will include the brackets also for deletions.

----------------------------------------------------------------------------------------------------------------------------------------------------
File Explore:
    Sex
    Lex
    Hex
----------------------------------------------------------------------------------------------------------------------------------------------------
To Change any word:
    ciw -(Change in Word)- move to any word and press . , vi remembers previous change


w - Move word by word forward
Shift + w - Move word by word
b - Move word by word backword
Shift + b


Ctrl + e  move down  by keeping cursor 
Ctrl + y  inverse of above

I - Insert mode to the very begginning of the line
A - Insert mode to the very end  of the line
$ - To move at the end of the line, but doesn't go into insert mode
0 - To move to the very first of the line, but doesn't go into insert mode

Commenting or inserting multiple lines
------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Move the cursor to the uppermost character (if you’re selecting lines the way down, bottom if you’re going up) before which you want to insert text
2. Enter Visual Block Mode by pressing Ctrl+v (unless you mapped the paste action to it, in which case you probably already know how to column insert)
3. Select the column using the arrow keys
4. Press Shift+i (switching into Insert Mode)
5. Type the text you want to insert (will be displayed only on the first line)
6. Press esc two times
?????
Profit!

Deleting or copying multiple line
-------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Go to the starting line of your block, and type 
    ma (mark "a", though you can of course use different letters, and even multiple letters for different marks provided you can keep it straight in your head what each letter is a mark of).

2. Then go to the last line and enter 
    d - delete
    y - yank
    [d'a (delete to mark "a") or y'a (yank to mark "a") (a). (' is single quote)]

3. That will delete/yank all lines from the current to the marked one (inclusive.

Then you can paste it somewhere else with the normal paste commands, such as p or P.

It's also compatible with vi as well as vim, on the off chance that your environment is not blessed with the latter.

Adding, Changing, and Deleting Text
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Unlike PC editors, you cannot replace or delete text by highlighting it with the mouse. Instead use the commands in the following tables.
Perhaps the most important command is the one that allows you to back up and undo your last action. Unfortunately, this command acts like a toggle, undoing and redoing your most recent action. You cannot go back more than one step.
*	u	UNDO WHATEVER YOU JUST DID; a simple toggle
The main purpose of an editor is to create, add, or modify text for a file.

    

Moving the Cursor
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Unlike many of the PC and MacIntosh editors, the mouse does not move the cursor within the vi editor screen (or window). You must use the the key commands listed below. On some UNIX platforms, the arrow keys may be used as well; however, since vi was designed with the Qwerty keyboard (containing no arrow keys) in mind, the arrow keys sometimes produce strange effects in vi and should be avoided.
If you go back and forth between a PC environment and a UNIX environment, you may find that this dissimilarity in methods for cursor movement is the most frustrating difference between the two.
In the table below, the symbol ^ before a letter means that the <Ctrl> key should be held down while the letter key is pressed.
*	j or <Return>
  [or down-arrow]	move cursor down one line
*	k [or up-arrow]	move cursor up one line
*	h or <Backspace>
  [or left-arrow]	move cursor left one character
*	l or <Space>
  [or right-arrow]	move cursor right one character
*	0 (zero)	move cursor to start of current line (the one with the cursor)
*	$	move cursor to end of current line
 	w	move cursor to beginning of next word
 	b	move cursor back to beginning of preceding word
 	:0<Return> or 1G	move cursor to first line in file
 	:n<Return> or nG	move cursor to line n
 	:$<Return> or G	move cursor to last line in file


Screen Manipulation
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The following commands allow the vi editor screen (or window) to move up or down several lines and to be refreshed.
    for full screen
    ----------------
 	^f	move forward one screen
 	^b	move backward one screen

    for half screen
    ---------------
 	^d	move forward(down)  half screen
 	^u	move backward(upward) half screen
 	^l	redraws the screen
 	^r	redraws the screen, removing deleted lines

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
For file tracing, moving forward and backward in exact cursor location
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ctrl + o - Retrace your movement in the backward direction.
Ctrl + i - Retrace your movements in the file forward direction.
'.  - Jump to last modification line
`.  - Jump to exact spot in last modification line.

gf : go  to the file [if you have any file path in the file, you can open that file ]
"~/learning/coding/BinarySearch.java"

to find the match of any java moethod
--------------------------------------

:vimgrep <methodname> **/*.java     

Example: :vimgrep insert */*.java  --- matches the "insert" string from all the files from current directory
Example: :vimgrep insert **/*.java  --- matches the "insert" string from all the files from current directory and parent directory

use :copen to open the window for all the matches and :cclose to close the window
:cnext and :cprev can be used to navigate to different matching files.
and :cnext , :cprev can be repeated with @@ 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To add all the files into Buffer
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:argadd coding/*.java  - this will add all the java files of directory coding into buffer, and then you can move with :b <TAB>


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To ignore files for specific directory from wildmenu
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:set wildignore=\*.git/\*     -  This would ignore all the files beneath .git directory from wildmenu


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To make the whole file or specific block UPPERCASE or LOWERCASE
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Open file in normal mode: 

Go to first line press gugg ---- this will make whole file content in lowercase from top to bottom
OR Go to lat line press gUG ---- this will make whole file content in lowercase from bottom to top

gu5k : make all small 5 lines backward (k can be replaced to j for forward direction)
gU5k : make all caps 5 lines forward(k can be replaced to j for forward direction)




Adding, Changing, and Deleting Text
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Unlike PC editors, you cannot replace or delete text by highlighting it with the mouse. Instead use the commands in the following tables.
Perhaps the most important command is the one that allows you to back up and undo your last action. Unfortunately, this command acts like a toggle, undoing and redoing your most recent action. You cannot go back more than one step.
*	u	UNDO WHATEVER YOU JUST DID; a simple toggle
The main purpose of an editor is to create, add, or modify text for a file.


Inserting or Adding Text
----------------------------------------------------------------------------------------------------------------------------------------------------
The following commands allow you to insert and add text. Each of these commands puts the vi editor into insert mode; thus, the <Esc> key must be pressed to terminate the entry of text and to put the vi editor back into command mode.
*	i	insert text before cursor, until <Esc> hit
 	I	insert text at beginning of current line, until <Esc> hit
*	a	append text after cursor, until <Esc> hit
 	A	append text to end of current line, until <Esc> hit
*	o	open and put text in a new line below current line, until <Esc> hit
*	O	open and put text in a new line above current line, until <Esc> hit


Changing Text
----------------------------------------------------------------------------------------------------------------------------------------
The following commands allow you to modify text.
*	r	replace single character under cursor (no <Esc> needed)
 	R	replace characters, starting with current cursor position, until <Esc> hit
 	cw	change the current word with new text,
starting with the character under cursor, until <Esc> hit
 	cNw	change N words beginning with character under cursor, until <Esc> hit;
  e.g., c5w changes 5 words
 	C	change (replace) the characters in the current line, until <Esc> hit
 	cc	change (replace) the entire current line, stopping when <Esc> is hit
 	Ncc or cNc	change (replace) the next N lines, starting with the current line,
stopping when <Esc> is hit

Deleting Text
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The following commands allow you to delete text.
*	x	delete single character under cursor
 	Nx	delete N characters, starting with character under cursor
 	dw	delete the single word beginning with character under cursor
 	dNw	delete N words beginning with character under cursor;
  e.g., d5w deletes 5 words
 	D	delete the remainder of the line, starting with current cursor position
*	dd	delete entire current line
 	Ndd or dNd	delete N lines, beginning with the current line;
  e.g., 5dd deletes 5 lines

to delete any single char in the file
-------------------------------------
go to that line, and type
fp : means find character p and then press x to delete and p to paste



Cutting and Pasting Text
---------------------------------------------------------------------------------------------------------------------
The following commands allow you to copy and paste text.
 	yy	copy (yank, cut) the current line into the buffer
 	Nyy or yNy	copy (yank, cut) the next N lines, including the current line, into the buffer
 	p	put (paste) the line(s) in the buffer into the text after the current line
Other Commands
    5yk - yank 5 lines from the cursor in backward direction
    5yj - yank 5 lines from the cursor in forward direction



Searching Text
-------------------------------------------------------------------------------------------------------------------------------------------
A common occurrence in text editing is to replace one word or phase by another. To locate instances of particular sets of characters (or strings), use the following commands.
 	/string	search forward for occurrence of string in text
 	?string	search backward for occurrence of string in text
 	n	move to next occurrence of search string
 	N	move to next occurrence of search string in opposite direction


Determining Line Numbers
---------------------------------------------------------------------------------------------------------------------------------------------------
Being able to determine the line number of the current line or the total number of lines in the file being edited is sometimes useful.
 	:.=	returns line number of current line at bottom of screen
 	:=	returns the total number of lines at bottom of screen
 	^g or :f  provides the current line number, along with the total number of lines,
in the file at the bottom of the screen


Saving and Reading Files
-------------------------------------------------------------------------------------------------------------------------------------------------------
These commands permit you to input and output files other than the named file with which you are currently working.

 	:r filename<Return>	read file named filename and insert after current line
(the line with cursor)
 	:w<Return>	write current contents to file named in original vi call
 	:w newfile<Return>	write current contents to a new file named newfile
 	:12,35w smallfile<Return>	write the contents of the lines numbered 12 through 35 to a new file named smallfile
 	:w! prevfile<Return>	write current contents over a pre-existing file named prevfile
-----------------------------------------------------------------------------------------------------------------------------------------------------
Recording in vim
You can record eveything on vim by pressing q<letter> ,vim will record everything in <letter> .
then you can re-apply it with @<letter> in normal mode (By pressing ESC you go to normal mode)
----------------------------------------------------------------------------------------------------------------------------------------------------

To open the command hostory of vim, pres q: , it will pop up a small window of commands history
Hi this is getting recorded in letter s.
Hi this is getting recorded in letter t.
----------------------------------------------------------------------------------------------------------------------------------------------------
To Split:

:sp Splits horizontaly
:vsp Split vertically

----------------------------------------------------------------------------------------------------------------------------------------------------

You can have opened all the files in the same window, and it will be stored in the vi buffer.

You can access the buffer by :ls

you can switch the buffer by :b<buffernumber>

----------------------------------------------------------------------------------------------------------------------------------------------------

vimgrep search and replace across all the files under the current directory
----------------------------------------------------------------------------------------------------------------------------------------------------

1) Search the pattern
    :vimgrep /Sam/gj **/*

    Notes:
         Sam is the search "pattern" sandwiched between two forward slashes
         The **/* says to search in all files recursively
         The g flag says to search for all occurrences in each line (this is actually overkill here, but it does not hurt either)
         The j flag prevents vim from automatically jumping to the first match
         This will populate the quickfix list with all instances of Sam. If you want to view the quickfix list, you can use the Vim command :copen

enter image description here

2. Substitute within all files that contain 'Sam'
Now we want to run Vim's :substitute command inside every file in the quickfix list. We can do this using the :cfdo {cmd} command which executes {cmd} in each file in the quickfix list. The specific {cmd} we want to use is :substitute or :s for short. The full line would look like:

    :cfdo %s/Sam/Bob/gc
    Notes:
        The % is a line range that specifies every line
        The g flag says to substitute all occurrences in each line
        The c flag causes vim to ask you to confirm each replacement individually (you might want to leave this out)

3. Save all files
    :cfdo update

----------------------------------------------------------------------------------------------------------------------------------------------------

Navigating in the vim
----------------------------------------------------------------------------------------------------------------------------------------------------
12j : move on to 12th line forward from the current line
12k : move on to 12th line backward from the curren line

12+ : move on to 12th line forward  at the start of the line from the current line
12- : move on to 12th line backward at the start of the line from the current line


to file compare
----------------------------------------------------------------------------------------------------------------------------------------------------
vimdiff file1 file2 : this will show the diff of file1 and file2. these files needs to be present.
Jump to previous change: [c
Jump to next change: ]c

if you want to compare contents in vim without saving the file then

    vim tempfile1 [enter]
    :botright vsp tempfile2 [enter]
    :windo difft [enter] : does diff for the tempfile1 and tempfile2.


for numbering of lines for taking notes
----------------------------------------------------------------------------------------------------------------------------------------------------
:put =range(1,20)

example:
:for i in range(1,10) | put = '192.168.1.'.i | endfor

Another way for existing content is
------------------------------------
1) go to beginning of the line and press ctrl+v visual mode
2) select down till the lines you want to generate the line numbers
3) staying in visual mode and press shift+i and insert 0
4) quite from visual mode by pressing esc
5) again select the lines in visual mode and press g ctrl+a 
6) after operation in step 5, vim will generate numbers in incremented order till your selected lines.


Identation of the lines
-------------------------------
Select the lines with Shift + v (Capital V) 
    Press Shift + > for right identation
    Press Shift + < for left identation
